openapi: '3.1.0'
info:
  title: Niabis API - OpenAPI 3.1.0
  description: |-
    This is a NiaBis API Server based on the OpenAPI 3.1 specification.
  termsOfService: http://swagger.io/terms/
  contact:
    email: zunda.dev@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about NiaBis API
  url: https://niabis-api.readme.io/
servers:
  - url: https://api.niabis.com/
    description: Producction deployment.
  - url: http://localhost:8080/
    description: Local Host deployment.
tags:
  - name: User
    description: Everything about User
  - name: Authorization
    description: Everything about Authorization
  - name: Location
    description: Everything about Location
paths:
  /image:
    post:
      security:
        - bearerAuth: []
      tags:
        - Image
      summary: Upload Image
      operationId: uploadImage
      parameters:
        - name: imageURL
          in: query
          description: Image URL
          required: false
          schema:
            type: string
            format: uri
      requestBody:
        required: false
        description: image to upload
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadImage'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /token:
    get:
      security:
        - basicAuth: []
      tags:
        - Authorization
      summary: Generate token
      operationId: generateToken
      parameters:
        - name: userID
          in: query
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: not found user
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /revokeToken:
    delete:
      security:
        - basicAuth: []
      tags:
        - Authorization
      summary: Revoke token
      operationId: revokeToken
      parameters:
        - name: tokenId
          in: query
          description: Token ID to revoke
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Token not found
  /locationDetail:
    get:
      security:
        - bearerAuth: []
      tags:
        - Location
      summary: Find Location
      description: Returns a single Location
      operationId: getLocationDetail
      parameters:
        - name: locationName
          in: query
          description: Name of location to return
          required: true
          schema:
            type: string
        - name: language
          in: query
          description: language of search
          required: true
          schema:
            type: string
            enum: ["ar", "zh", "zh_TW", "da", "nl", "en_AU", "en_CA", "en_HK", "en_IN", "en_IE", "en_MY", "en_NZ", "en_PH", "en_SG", "en_ZA", "en_UK", "en", "fr", "fr_BE", "fr_CA", "fr_CH", "de_AT", "de", "el", "iw", "in", "it", "it_CH", "ja", "ko", "no", "pt_PT", "pt", "ru", "es_AR", "es_CO", "es_MX", "es_PE", "es", "es_VE", "es_CL", "sv", "th", "tr", "vi"]
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Location not found
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /user:
    get:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      parameters:
        - name: userID
          in: query
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: User not found
    patch:
      tags:
        - User
      summary: Update User
      operationId: updateUserByID
      parameters:
        - name: userID
          in: query
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: User Data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: User not found

security:
  - basicAuth: []
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Credentials or access token for API
    basicAuth:
      type: http
      scheme: basic

  schemas:
    LabelContent:
      type: object
      description: Content with Label
      properties:
        name:
          type: string
          description: Name
        localizedName:
          type: string
          description: Localized Name
      required:
        - name
        - localizedName
    Location:
      type: object
      description: Location
      properties:
        id:
          type: integer
          description: ID
        description:
          type: string
          description: Description
        cuisines:
          type: array
          items:
            $ref: '#/components/schemas/LabelContent'
        imageURLs:
          type: array
          items:
            type: string
            format: uri
            description: Image URL
      required:
        - id
        - description
        - cuisines
        - imageURLs
        
    User:
      type: object
      description: A value with the User contents.
      properties:
        id:
          type: string
          format: uuid
          description: Id of User
        email:
          type: string
          description: Email address
      required:
        - id
        - email
    UpdateUser:
      type: object
      description: A value with the user contents.
      properties:
        email:
          type: string
          description: Email address.
    Token:
      type: object
      description: A value with the Token contents.
      properties:
        id:
          type: string
          description: Token Id.
          format: uuid
        token:
          type: string
          description: Email address.
        expireDate:
          type: string
          format: date-time
          description: Expired date.
      required:
        - id
        - token
        - expireDate
    UploadImage:
      type: object
      description: A value with the Image contents.
      properties:
        id:
          description: Image Id.
          type: string
          format: uuid
      required:
        - id
    ErrorMessage:
      type: object
      description: A value with the Image contents.
      properties:
        message:
          description: Error Message
          type: string
      required:
        - message
