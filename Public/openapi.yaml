openapi: '3.1.0'
info:
  title: Swagger Petstore - OpenAPI 3.1.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.1 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

  termsOfService: http://swagger.io/terms/
  contact:
    email: zunda.dev@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://toast-server-d79afc6f1b52.herokuapp.com/api/
    description: Producction deployment.
  - url: http://localhost:8080/api/
    description: Local Host deployment.
tags:
  - name: User
    description: Everything about User
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /signup:
    post:
      tags:
        - Login
      summary: Sign Up
      operationId: signUp
      parameters:
        - name: userName
          in: query
          description: Login User Name
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Login Password
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
  /login:
    post:
      tags:
        - Login
      summary: Login
      operationId: login
      parameters:
        - name: userName
          in: query
          description: Login User Name
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Login Password
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
  /user:
    get:
      tags:
        - User
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      parameters:
        - name: userID
          in: query
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '303':
          description: User not found
          headers:
            location:
              schema:
                type: string
              
    post:
      tags:
        - User
      summary: Post a new user
      description: Post a new user
      operationId: postUser
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
    delete:
      tags:
        - User
      summary: Delete user by ID
      description: Delete user by ID
      operationId: deleteUserByID
      parameters:
        - name: userID
          in: query
          description: ID of user to delte
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Deleted
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    patch:
      tags:
        - User
      summary: Update User
      operationId: updateUserByID
      parameters:
        - name: userID
          in: query
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: User Data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found

components:
  schemas:
    User:
      type: object
      description: A value with the greeting contents.
      properties:
        id:
          type: string
          format: uuid
          description: The string representation of the greeting.
        firstName:
          type: string
          description: The string representation of the greeting.
        lastName:
          type: string
          description: The string representation of the greeting.
        age:
          type: integer
          description: The string representation of the greeting.
      required:
        - id
        - firstName
        - lastName
        - age
    UpdateUser:
      type: object
      description: A value with the user contents.
      properties:
        firstName:
          type: string
          description: The string representation of the greeting.
        lastName:
          type: string
          description: The string representation of the greeting.
        age:
          type: integer
          description: The string representation of the greeting.
